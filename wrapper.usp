/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Wrapper"
// #HINT ""
#DEFINE_CONSTANT PULSE_TIME 50
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT into$, CamQuery, CamPowerOn, CamPowerOff, CamUp, CamDown, CamRight, CamLeft, ZoomIn, ZoomOut, SetPreset, Preset1, Preset2, Preset3, Preset4, Preset5, Preset6;
ANALOG_INPUT PanSet, TiltSet, ZoomSet, CamIncrement, ZoomIncrement;
STRING_INPUT CommandToWrap[64], CamResponseRX[2000];
// BUFFER_INPUT 

DIGITAL_OUTPUT outto$, StateOn, StateOff;
ANALOG_OUTPUT Pan, Tilt, Zoom;
STRING_OUTPUT Wrapped, Response;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER MinPan, MaxPan, MinTilt, MaxTilt, MinZoom, MaxZoom;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER CamIP[15];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

Integer_Function StrToHex(STRING X)
{
	INTEGER i, pwr, res;
	STRING ch[1];

	pwr=4096;
	res=0;
	
	for	(i = 1 to 4)
	{
		ch=Mid(X,i,1);
		if (ch="F")
		{   
			res=res+pwr*15;
		} 
		else if (ch="E")
		{   
			res=res+pwr*14;
		}
		else if (ch="D")
		{   
			res=res+pwr*13;
		}
		else if (ch="C")
		{   
			res=res+pwr*12;
		}
		else if (ch="B")
		{   
			res=res+pwr*11;
		}
		else if (ch="A")
		{   
			res=res+pwr*10;
		}
		else
		{
			res=res+pwr*atoi(ch);
		}
 		pwr=pwr/16;
	}
    Return (res);
}

String_Function HexToStr(INTEGER X)
{
	STRING res[4];
    INTEGER i, pwr, tmp, rem;
	pwr=4096;
	res="";
	for (i = 1 to 4)
	{
		tmp=X/pwr;		
        X=X-tmp*pwr;
		if (tmp=15)
		{
			res=res + "F";
		}
		else if (tmp=14)
		{
			res=res + "E";
		}
		else if (tmp=13)
		{
			res=res + "D";
		}
		else if (tmp=12)
		{
			res=res + "C";
		}
		else if (tmp=11)
		{
			res=res + "B";
		}
		else if (tmp=10)
		{
			res=res + "A";
		}
		else
		{
			res=res + itoa(tmp);
		}
		pwr=pwr/16;
	}
    Return (res);
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH CamQuery
{
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23O&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
	Delay(20);
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23APC&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
	Delay(20);
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23GZ&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";	
}


PUSH CamPowerOn
{
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23O1&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";	
}

PUSH CamPowerOff
{
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23O0&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";	
}

PUSH CamUp
{
	INTEGER Y;
//	Y = TiltSet + CamIncrement;
	Y = TiltSet - CamIncrement;
	if (Y > MaxTilt)
	{
		Y = MaxTilt;
	}
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23APC" + HexToStr(PanSet) + HexToStr(Y) + "&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
}

PUSH CamDown
{
	INTEGER Y;
//	Y = TiltSet - CamIncrement;
	Y = TiltSet + CamIncrement;
	if (Y < MinTilt)
	{
		Y = MinTilt;
	}
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23APC" + HexToStr(PanSet) + HexToStr(Y) + "&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
}

PUSH CamRight
{
	INTEGER X;
//	X = PanSet + CamIncrement;
	X = PanSet - CamIncrement;
	if (X > MaxPan)
	{
		X = MaxPan;
	}
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23APC" + HexToStr(X) + HexToStr(TiltSet) + "&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
}

PUSH CamLeft
{
	INTEGER X;
//	X = PanSet - CamIncrement;
	X = PanSet + CamIncrement;
	if (X < MinPan)
	{
		X = MinPan;
	}
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23APC" + HexToStr(X) + HexToStr(TiltSet) + "&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
}


PUSH ZoomIn
{
	INTEGER X;
	X = ZoomSet + ZoomIncrement;
	if (X > MaxZoom)
	{
		X = MaxZoom;
	}
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23AXZ" + Right(HexToStr(X), 3) + "&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
}

PUSH ZoomOut
{
	INTEGER X;
	X = ZoomSet - ZoomIncrement;
	if (X < MinZoom)
	{
		X = MinZoom;
	}
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23AXZ" + Right(HexToStr(X), 3) + "&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
}

PUSH Preset1
{
	if (SetPreset)
	{
		Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23M01&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";	
	}
	else
	{
		Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23UPVS000&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
		Delay(20);
		Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23R01&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
	}
	Delay(20);
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23O&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
	Delay(20);
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23APC&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
	Delay(20);
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23GZ&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";	
}
PUSH Preset2
{
	if (SetPreset)
	{
		Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23M02&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";	
	}
	else
	{
		Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23UPVS000&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
		Delay(20);
		Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23R02&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
	}
	Delay(20);
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23O&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
	Delay(20);
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23APC&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
	Delay(20);
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23GZ&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";	
}
PUSH Preset3
{
	if (SetPreset)
	{
		Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23M03&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";	
	}
	else
	{
		Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23UPVS000&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
		Delay(20);
		Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23R03&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
	}
	Delay(20);
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23O&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
	Delay(20);
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23APC&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
	Delay(20);
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23GZ&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";	
}
PUSH Preset4
{
	if (SetPreset)
	{
		Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23M04&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";	
	}
	else
	{
		Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23UPVS000&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
		Delay(20);
		Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23R04&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
	}
	Delay(20);
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23O&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
	Delay(20);
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23APC&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
	Delay(20);
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23GZ&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";	
}
PUSH Preset5
{
	if (SetPreset)
	{
		Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23M05&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";	
	}
	else
	{
		Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23UPVS000&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
		Delay(20);
		Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23R05&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
	}
	Delay(20);
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23O&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
	Delay(20);
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23APC&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
	Delay(20);
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23GZ&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";	
}
PUSH Preset6
{
	if (SetPreset)
	{
		Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23M06&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";	
	}
	else
	{
		Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23UPVS000&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
		Delay(20);
		Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23R06&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
	}
	Delay(20);
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23O&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
	Delay(20);
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23APC&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
	Delay(20);
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23GZ&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";	
}
/*
RELEASE input
{
    // TODO:  Add code here
}
*/


CHANGE CommandToWrap
{
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23" + CommandToWrap + "&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
}
/*
CHANGE PanSet
{
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23APC" + HexToStr(PanSet) + HexToStr(TiltSet) + "&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
}
CHANGE TiltSet
{
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23APC" + HexToStr(PanSet) + HexToStr(TiltSet) + "&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
}
CHANGE ZoomSet
{
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23AXZ" + Right(HexToStr(ZoomSet), 3) + "&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
}
*/ 
/*
CHANGE PTSpeed
{
	STRING PTS[2];
	
	PTS = itoa(PTSpeed);
	if (Len(PTS)=1)
	{
		PTS="0" + PTS;
	}		
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23P" + PTS + "&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
    Wrapped= "GET /cgi-bin/aw_ptz?cmd=%23T" + PTS + "&res=1 HTTP/1.1\r\nHost: " + CamIP + "\r\n\r\n";
}
*/

CHANGE CamResponseRX
{
	STRING Temp[20];

	Temp=Right(CamResponseRx, Len(CamResponseRx)-ReverseFind("\r\n\r\n",CamResponseRx)-3);
	if (Mid(Temp,1,3)="aPC")
	{
		Pan=StrToHex(Mid(Temp,4,4));
		Tilt=StrToHex(Mid(Temp,8,4));
	}
	else if (Mid(Temp,1,2)="p0")
	{
    	Pulse(PULSE_TIME, StateOff);
	}
	else if (Mid(Temp,1,2)="p1")
	{
    	Pulse(PULSE_TIME, StateOn);
	}
	else if (Mid(Temp,1,3)="axz")
	{
		Temp = "0" + Mid(Temp,4,3);
		Zoom=StrToHex(Temp);
	}
	else if (Mid(Temp,1,2)="gz")
	{
		Temp = "0" + Mid(Temp,3,3);
		Zoom=StrToHex(Temp);
	}

	Response = Temp;
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
/*
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
*/

